// <auto-generated/>
#nullable enable

namespace Dot5.Bwasm.StraberryShake.Sample.MyGqlServer
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GetAllGadgetResult : global::System.IEquatable<GetAllGadgetResult>, IGetAllGadgetResult
    {
        public GetAllGadgetResult(global::System.Collections.Generic.IReadOnlyList<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadget_FetchAllGadgets?>? fetchAllGadgets)
        {
            FetchAllGadgets = fetchAllGadgets;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadget_FetchAllGadgets?>? FetchAllGadgets { get; }

        public virtual global::System.Boolean Equals(GetAllGadgetResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(FetchAllGadgets, other.FetchAllGadgets));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllGadgetResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (FetchAllGadgets != null)
                {
                    foreach (var FetchAllGadgets_elm in FetchAllGadgets)
                    {
                        if (FetchAllGadgets_elm != null)
                        {
                            hash ^= 397 * FetchAllGadgets_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GetAllGadget_FetchAllGadgets_Gadgets : global::System.IEquatable<GetAllGadget_FetchAllGadgets_Gadgets>, IGetAllGadget_FetchAllGadgets_Gadgets
    {
        public GetAllGadget_FetchAllGadgets_Gadgets(global::System.Int32 id, global::System.String? productName, global::System.String? brand, global::System.Decimal cost, global::System.String? type)
        {
            Id = id;
            ProductName = productName;
            Brand = brand;
            Cost = cost;
            Type = type;
        }

        public global::System.Int32 Id { get; }

        public global::System.String? ProductName { get; }

        public global::System.String? Brand { get; }

        public global::System.Decimal Cost { get; }

        public global::System.String? Type { get; }

        public virtual global::System.Boolean Equals(GetAllGadget_FetchAllGadgets_Gadgets? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((ProductName is null && other.ProductName is null) || ProductName != null && ProductName.Equals(other.ProductName)) && ((Brand is null && other.Brand is null) || Brand != null && Brand.Equals(other.Brand)) && Cost == other.Cost && ((Type is null && other.Type is null) || Type != null && Type.Equals(other.Type));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllGadget_FetchAllGadgets_Gadgets)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (ProductName != null)
                {
                    hash ^= 397 * ProductName.GetHashCode();
                }

                if (Brand != null)
                {
                    hash ^= 397 * Brand.GetHashCode();
                }

                hash ^= 397 * Cost.GetHashCode();
                if (Type != null)
                {
                    hash ^= 397 * Type.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public interface IGetAllGadgetResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadget_FetchAllGadgets?>? FetchAllGadgets { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public interface IGetAllGadget_FetchAllGadgets
    {
        public global::System.Int32 Id { get; }

        public global::System.String? ProductName { get; }

        public global::System.String? Brand { get; }

        public global::System.Decimal Cost { get; }

        public global::System.String? Type { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public interface IGetAllGadget_FetchAllGadgets_Gadgets : IGetAllGadget_FetchAllGadgets
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GetFilterByBrandResult : global::System.IEquatable<GetFilterByBrandResult>, IGetFilterByBrandResult
    {
        public GetFilterByBrandResult(global::System.Collections.Generic.IReadOnlyList<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrand_FilterByBrand?>? filterByBrand)
        {
            FilterByBrand = filterByBrand;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrand_FilterByBrand?>? FilterByBrand { get; }

        public virtual global::System.Boolean Equals(GetFilterByBrandResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(FilterByBrand, other.FilterByBrand));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFilterByBrandResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (FilterByBrand != null)
                {
                    foreach (var FilterByBrand_elm in FilterByBrand)
                    {
                        if (FilterByBrand_elm != null)
                        {
                            hash ^= 397 * FilterByBrand_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GetFilterByBrand_FilterByBrand_Gadgets : global::System.IEquatable<GetFilterByBrand_FilterByBrand_Gadgets>, IGetFilterByBrand_FilterByBrand_Gadgets
    {
        public GetFilterByBrand_FilterByBrand_Gadgets(global::System.Int32 id, global::System.String? productName, global::System.Decimal cost, global::System.String? type, global::System.String? brand)
        {
            Id = id;
            ProductName = productName;
            Cost = cost;
            Type = type;
            Brand = brand;
        }

        public global::System.Int32 Id { get; }

        public global::System.String? ProductName { get; }

        public global::System.Decimal Cost { get; }

        public global::System.String? Type { get; }

        public global::System.String? Brand { get; }

        public virtual global::System.Boolean Equals(GetFilterByBrand_FilterByBrand_Gadgets? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((ProductName is null && other.ProductName is null) || ProductName != null && ProductName.Equals(other.ProductName)) && Cost == other.Cost && ((Type is null && other.Type is null) || Type != null && Type.Equals(other.Type)) && ((Brand is null && other.Brand is null) || Brand != null && Brand.Equals(other.Brand));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFilterByBrand_FilterByBrand_Gadgets)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (ProductName != null)
                {
                    hash ^= 397 * ProductName.GetHashCode();
                }

                hash ^= 397 * Cost.GetHashCode();
                if (Type != null)
                {
                    hash ^= 397 * Type.GetHashCode();
                }

                if (Brand != null)
                {
                    hash ^= 397 * Brand.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public interface IGetFilterByBrandResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrand_FilterByBrand?>? FilterByBrand { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public interface IGetFilterByBrand_FilterByBrand
    {
        public global::System.Int32 Id { get; }

        public global::System.String? ProductName { get; }

        public global::System.Decimal Cost { get; }

        public global::System.String? Type { get; }

        public global::System.String? Brand { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public interface IGetFilterByBrand_FilterByBrand_Gadgets : IGetFilterByBrand_FilterByBrand
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class AddGadgetResult : global::System.IEquatable<AddGadgetResult>, IAddGadgetResult
    {
        public AddGadgetResult(global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadget_Save? save)
        {
            Save = save;
        }

        public global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadget_Save? Save { get; }

        public virtual global::System.Boolean Equals(AddGadgetResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Save is null && other.Save is null) || Save != null && Save.Equals(other.Save)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddGadgetResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Save != null)
                {
                    hash ^= 397 * Save.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class AddGadget_Save_Gadgets : global::System.IEquatable<AddGadget_Save_Gadgets>, IAddGadget_Save_Gadgets
    {
        public AddGadget_Save_Gadgets(global::System.Int32 id, global::System.String? productName, global::System.String? brand, global::System.Decimal cost, global::System.String? type)
        {
            Id = id;
            ProductName = productName;
            Brand = brand;
            Cost = cost;
            Type = type;
        }

        public global::System.Int32 Id { get; }

        public global::System.String? ProductName { get; }

        public global::System.String? Brand { get; }

        public global::System.Decimal Cost { get; }

        public global::System.String? Type { get; }

        public virtual global::System.Boolean Equals(AddGadget_Save_Gadgets? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((ProductName is null && other.ProductName is null) || ProductName != null && ProductName.Equals(other.ProductName)) && ((Brand is null && other.Brand is null) || Brand != null && Brand.Equals(other.Brand)) && Cost == other.Cost && ((Type is null && other.Type is null) || Type != null && Type.Equals(other.Type));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddGadget_Save_Gadgets)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (ProductName != null)
                {
                    hash ^= 397 * ProductName.GetHashCode();
                }

                if (Brand != null)
                {
                    hash ^= 397 * Brand.GetHashCode();
                }

                hash ^= 397 * Cost.GetHashCode();
                if (Type != null)
                {
                    hash ^= 397 * Type.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public interface IAddGadgetResult
    {
        public global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadget_Save? Save { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public interface IAddGadget_Save
    {
        public global::System.Int32 Id { get; }

        public global::System.String? ProductName { get; }

        public global::System.String? Brand { get; }

        public global::System.Decimal Cost { get; }

        public global::System.String? Type { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public interface IAddGadget_Save_Gadgets : IAddGadget_Save
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GadgetsInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _decimalFormatter = default !;
        public global::System.String TypeName => "GadgetsInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _decimalFormatter = serializerResolver.GetInputValueFormatter("Decimal");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.GadgetsInput;
            var inputInfo = runtimeValue as global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.IGadgetsInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsProductNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("productName", FormatProductName(input.ProductName)));
            }

            if (inputInfo.IsBrandSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("brand", FormatBrand(input.Brand)));
            }

            if (inputInfo.IsCostSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("cost", FormatCost(input.Cost)));
            }

            if (inputInfo.IsTypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("type", FormatType(input.Type)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatProductName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatBrand(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCost(global::System.Decimal input)
        {
            return _decimalFormatter.Format(input);
        }

        private global::System.Object? FormatType(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GadgetsInput : global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.IGadgetsInputInfo, global::System.IEquatable<GadgetsInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GadgetsInput)obj);
        }

        public virtual global::System.Boolean Equals(GadgetsInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((ProductName is null && other.ProductName is null) || ProductName != null && ProductName.Equals(other.ProductName)) && ((Brand is null && other.Brand is null) || Brand != null && Brand.Equals(other.Brand)) && Cost == other.Cost && ((Type is null && other.Type is null) || Type != null && Type.Equals(other.Type));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (ProductName != null)
                {
                    hash ^= 397 * ProductName.GetHashCode();
                }

                if (Brand != null)
                {
                    hash ^= 397 * Brand.GetHashCode();
                }

                hash ^= 397 * Cost.GetHashCode();
                if (Type != null)
                {
                    hash ^= 397 * Type.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Int32 _value_id;
        private global::System.Boolean _set_id;
        private global::System.String? _value_productName;
        private global::System.Boolean _set_productName;
        private global::System.String? _value_brand;
        private global::System.Boolean _set_brand;
        private global::System.Decimal _value_cost;
        private global::System.Boolean _set_cost;
        private global::System.String? _value_type;
        private global::System.Boolean _set_type;
        public global::System.Int32 Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.IGadgetsInputInfo.IsIdSet => _set_id;
        public global::System.String? ProductName
        {
            get => _value_productName;
            set
            {
                _set_productName = true;
                _value_productName = value;
            }
        }

        global::System.Boolean global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.IGadgetsInputInfo.IsProductNameSet => _set_productName;
        public global::System.String? Brand
        {
            get => _value_brand;
            set
            {
                _set_brand = true;
                _value_brand = value;
            }
        }

        global::System.Boolean global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.IGadgetsInputInfo.IsBrandSet => _set_brand;
        public global::System.Decimal Cost
        {
            get => _value_cost;
            set
            {
                _set_cost = true;
                _value_cost = value;
            }
        }

        global::System.Boolean global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.IGadgetsInputInfo.IsCostSet => _set_cost;
        public global::System.String? Type
        {
            get => _value_type;
            set
            {
                _set_type = true;
                _value_type = value;
            }
        }

        global::System.Boolean global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.IGadgetsInputInfo.IsTypeSet => _set_type;
    }

    /// <summary>
    /// Represents the operation service of the GetAllGadget GraphQL operation
    /// <code>
    /// query GetAllGadget {
    ///   fetchAllGadgets {
    ///     __typename
    ///     id
    ///     productName
    ///     brand
    ///     cost
    ///     type
    ///     ... on Gadgets {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GetAllGadgetQueryDocument : global::StrawberryShake.IDocument
    {
        private GetAllGadgetQueryDocument()
        {
        }

        public static GetAllGadgetQueryDocument Instance { get; } = new GetAllGadgetQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c683d22368e9e9c2eebafc07e228d1a5");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllGadget GraphQL operation
    /// <code>
    /// query GetAllGadget {
    ///   fetchAllGadgets {
    ///     __typename
    ///     id
    ///     productName
    ///     brand
    ///     cost
    ///     type
    ///     ... on Gadgets {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GetAllGadgetQuery : global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadgetQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAllGadgetResult> _operationExecutor;
        public GetAllGadgetQuery(global::StrawberryShake.IOperationExecutor<IGetAllGadgetResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAllGadgetResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllGadgetResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllGadgetResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAllGadgetQueryDocument.Instance.Hash.Value, name: "GetAllGadget", document: GetAllGadgetQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllGadget GraphQL operation
    /// <code>
    /// query GetAllGadget {
    ///   fetchAllGadgets {
    ///     __typename
    ///     id
    ///     productName
    ///     brand
    ///     cost
    ///     type
    ///     ... on Gadgets {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public interface IGetAllGadgetQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllGadgetResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllGadgetResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetFilterByBrand GraphQL operation
    /// <code>
    /// query GetFilterByBrand($brandQuery: String) {
    ///   filterByBrand(brand: $brandQuery) {
    ///     __typename
    ///     id
    ///     productName
    ///     cost
    ///     type
    ///     brand
    ///     ... on Gadgets {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GetFilterByBrandQueryDocument : global::StrawberryShake.IDocument
    {
        private GetFilterByBrandQueryDocument()
        {
        }

        public static GetFilterByBrandQueryDocument Instance { get; } = new GetFilterByBrandQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x28, 0x24, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x28, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x3a, 0x20, 0x24, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "75771794041970cfa0a49eca767df035");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFilterByBrand GraphQL operation
    /// <code>
    /// query GetFilterByBrand($brandQuery: String) {
    ///   filterByBrand(brand: $brandQuery) {
    ///     __typename
    ///     id
    ///     productName
    ///     cost
    ///     type
    ///     brand
    ///     ... on Gadgets {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GetFilterByBrandQuery : global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrandQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetFilterByBrandResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetFilterByBrandQuery(global::StrawberryShake.IOperationExecutor<IGetFilterByBrandResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetFilterByBrandResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFilterByBrandResult>> ExecuteAsync(global::System.String? brandQuery, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(brandQuery);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFilterByBrandResult>> Watch(global::System.String? brandQuery, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(brandQuery);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? brandQuery)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("brandQuery", FormatBrandQuery(brandQuery));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetFilterByBrandQueryDocument.Instance.Hash.Value, name: "GetFilterByBrand", document: GetFilterByBrandQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatBrandQuery(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFilterByBrand GraphQL operation
    /// <code>
    /// query GetFilterByBrand($brandQuery: String) {
    ///   filterByBrand(brand: $brandQuery) {
    ///     __typename
    ///     id
    ///     productName
    ///     cost
    ///     type
    ///     brand
    ///     ... on Gadgets {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public interface IGetFilterByBrandQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFilterByBrandResult>> ExecuteAsync(global::System.String? brandQuery, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFilterByBrandResult>> Watch(global::System.String? brandQuery, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddGadget GraphQL operation
    /// <code>
    /// mutation AddGadget($myGadgets: GadgetsInput) {
    ///   save(model: $myGadgets) {
    ///     __typename
    ///     id
    ///     productName
    ///     brand
    ///     cost
    ///     type
    ///     ... on Gadgets {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class AddGadgetMutationDocument : global::StrawberryShake.IDocument
    {
        private AddGadgetMutationDocument()
        {
        }

        public static AddGadgetMutationDocument Instance { get; } = new AddGadgetMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x28, 0x24, 0x6d, 0x79, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x73, 0x3a, 0x20, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x61, 0x76, 0x65, 0x28, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x20, 0x24, 0x6d, 0x79, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x73, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "4dc664ba0326209beb93a2494bcb47d7");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddGadget GraphQL operation
    /// <code>
    /// mutation AddGadget($myGadgets: GadgetsInput) {
    ///   save(model: $myGadgets) {
    ///     __typename
    ///     id
    ///     productName
    ///     brand
    ///     cost
    ///     type
    ///     ... on Gadgets {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class AddGadgetMutation : global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadgetMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddGadgetResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _gadgetsInputFormatter;
        public AddGadgetMutation(global::StrawberryShake.IOperationExecutor<IAddGadgetResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _gadgetsInputFormatter = serializerResolver.GetInputValueFormatter("GadgetsInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddGadgetResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddGadgetResult>> ExecuteAsync(global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.GadgetsInput? myGadgets, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(myGadgets);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddGadgetResult>> Watch(global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.GadgetsInput? myGadgets, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(myGadgets);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.GadgetsInput? myGadgets)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("myGadgets", FormatMyGadgets(myGadgets));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddGadgetMutationDocument.Instance.Hash.Value, name: "AddGadget", document: AddGadgetMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatMyGadgets(global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.GadgetsInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _gadgetsInputFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddGadget GraphQL operation
    /// <code>
    /// mutation AddGadget($myGadgets: GadgetsInput) {
    ///   save(model: $myGadgets) {
    ///     __typename
    ///     id
    ///     productName
    ///     brand
    ///     cost
    ///     type
    ///     ... on Gadgets {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public interface IAddGadgetMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddGadgetResult>> ExecuteAsync(global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.GadgetsInput? myGadgets, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddGadgetResult>> Watch(global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.GadgetsInput? myGadgets, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the MyGqlServerClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class MyGqlServerClient : global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IMyGqlServerClient
    {
        private readonly global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadgetQuery _getAllGadget;
        private readonly global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrandQuery _getFilterByBrand;
        private readonly global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadgetMutation _addGadget;
        public MyGqlServerClient(global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadgetQuery getAllGadget, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrandQuery getFilterByBrand, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadgetMutation addGadget)
        {
            _getAllGadget = getAllGadget ?? throw new global::System.ArgumentNullException(nameof(getAllGadget));
            _getFilterByBrand = getFilterByBrand ?? throw new global::System.ArgumentNullException(nameof(getFilterByBrand));
            _addGadget = addGadget ?? throw new global::System.ArgumentNullException(nameof(addGadget));
        }

        public static global::System.String ClientName => "MyGqlServerClient";
        public global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadgetQuery GetAllGadget => _getAllGadget;
        public global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrandQuery GetFilterByBrand => _getFilterByBrand;
        public global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadgetMutation AddGadget => _addGadget;
    }

    /// <summary>
    /// Represents the MyGqlServerClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public interface IMyGqlServerClient
    {
        global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadgetQuery GetAllGadget { get; }

        global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrandQuery GetFilterByBrand { get; }

        global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadgetMutation AddGadget { get; }
    }
}

namespace Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GadgetsEntity
    {
        public GadgetsEntity(global::System.Int32 id = default !, global::System.String? productName = default !, global::System.String? brand = default !, global::System.Decimal cost = default !, global::System.String? type = default !)
        {
            Id = id;
            ProductName = productName;
            Brand = brand;
            Cost = cost;
            Type = type;
        }

        public global::System.Int32 Id { get; }

        public global::System.String? ProductName { get; }

        public global::System.String? Brand { get; }

        public global::System.Decimal Cost { get; }

        public global::System.String? Type { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GetAllGadgetResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.GetAllGadgetResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity, GetAllGadget_FetchAllGadgets_Gadgets> _getAllGadget_FetchAllGadgets_GadgetsFromGadgetsEntityMapper;
        public GetAllGadgetResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity, GetAllGadget_FetchAllGadgets_Gadgets> getAllGadget_FetchAllGadgets_GadgetsFromGadgetsEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getAllGadget_FetchAllGadgets_GadgetsFromGadgetsEntityMapper = getAllGadget_FetchAllGadgets_GadgetsFromGadgetsEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getAllGadget_FetchAllGadgets_GadgetsFromGadgetsEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadgetResult);
        public GetAllGadgetResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetAllGadgetResultInfo info)
            {
                return new GetAllGadgetResult(MapIGetAllGadget_FetchAllGadgetsArray(info.FetchAllGadgets, snapshot));
            }

            throw new global::System.ArgumentException("GetAllGadgetResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadget_FetchAllGadgets?>? MapIGetAllGadget_FetchAllGadgetsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var gadgetss = new global::System.Collections.Generic.List<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadget_FetchAllGadgets?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                gadgetss.Add(MapIGetAllGadget_FetchAllGadgets(child, snapshot));
            }

            return gadgetss;
        }

        private global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadget_FetchAllGadgets? MapIGetAllGadget_FetchAllGadgets(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Gadgets", global::System.StringComparison.Ordinal))
            {
                return _getAllGadget_FetchAllGadgets_GadgetsFromGadgetsEntityMapper.Map(snapshot.GetEntity<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GetAllGadgetResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetAllGadgetResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? fetchAllGadgets, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            FetchAllGadgets = fetchAllGadgets;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? FetchAllGadgets { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAllGadgetResultInfo(FetchAllGadgets, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GetAllGadget_FetchAllGadgets_GadgetsFromGadgetsEntityMapper : global::StrawberryShake.IEntityMapper<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity, GetAllGadget_FetchAllGadgets_Gadgets>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetAllGadget_FetchAllGadgets_GadgetsFromGadgetsEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetAllGadget_FetchAllGadgets_Gadgets Map(global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetAllGadget_FetchAllGadgets_Gadgets(entity.Id, entity.ProductName, entity.Brand, entity.Cost, entity.Type);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GetFilterByBrandResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.GetFilterByBrandResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity, GetFilterByBrand_FilterByBrand_Gadgets> _getFilterByBrand_FilterByBrand_GadgetsFromGadgetsEntityMapper;
        public GetFilterByBrandResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity, GetFilterByBrand_FilterByBrand_Gadgets> getFilterByBrand_FilterByBrand_GadgetsFromGadgetsEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFilterByBrand_FilterByBrand_GadgetsFromGadgetsEntityMapper = getFilterByBrand_FilterByBrand_GadgetsFromGadgetsEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFilterByBrand_FilterByBrand_GadgetsFromGadgetsEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrandResult);
        public GetFilterByBrandResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetFilterByBrandResultInfo info)
            {
                return new GetFilterByBrandResult(MapIGetFilterByBrand_FilterByBrandArray(info.FilterByBrand, snapshot));
            }

            throw new global::System.ArgumentException("GetFilterByBrandResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrand_FilterByBrand?>? MapIGetFilterByBrand_FilterByBrandArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var gadgetss = new global::System.Collections.Generic.List<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrand_FilterByBrand?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                gadgetss.Add(MapIGetFilterByBrand_FilterByBrand(child, snapshot));
            }

            return gadgetss;
        }

        private global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrand_FilterByBrand? MapIGetFilterByBrand_FilterByBrand(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Gadgets", global::System.StringComparison.Ordinal))
            {
                return _getFilterByBrand_FilterByBrand_GadgetsFromGadgetsEntityMapper.Map(snapshot.GetEntity<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GetFilterByBrandResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetFilterByBrandResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? filterByBrand, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            FilterByBrand = filterByBrand;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? FilterByBrand { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetFilterByBrandResultInfo(FilterByBrand, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GetFilterByBrand_FilterByBrand_GadgetsFromGadgetsEntityMapper : global::StrawberryShake.IEntityMapper<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity, GetFilterByBrand_FilterByBrand_Gadgets>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetFilterByBrand_FilterByBrand_GadgetsFromGadgetsEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetFilterByBrand_FilterByBrand_Gadgets Map(global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFilterByBrand_FilterByBrand_Gadgets(entity.Id, entity.ProductName, entity.Cost, entity.Type, entity.Brand);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class AddGadgetResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.AddGadgetResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity, AddGadget_Save_Gadgets> _addGadget_Save_GadgetsFromGadgetsEntityMapper;
        public AddGadgetResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity, AddGadget_Save_Gadgets> addGadget_Save_GadgetsFromGadgetsEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _addGadget_Save_GadgetsFromGadgetsEntityMapper = addGadget_Save_GadgetsFromGadgetsEntityMapper ?? throw new global::System.ArgumentNullException(nameof(addGadget_Save_GadgetsFromGadgetsEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadgetResult);
        public AddGadgetResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddGadgetResultInfo info)
            {
                return new AddGadgetResult(MapIAddGadget_Save(info.Save, snapshot));
            }

            throw new global::System.ArgumentException("AddGadgetResultInfo expected.");
        }

        private global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadget_Save? MapIAddGadget_Save(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Gadgets", global::System.StringComparison.Ordinal))
            {
                return _addGadget_Save_GadgetsFromGadgetsEntityMapper.Map(snapshot.GetEntity<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class AddGadgetResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddGadgetResultInfo(global::StrawberryShake.EntityId? save, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Save = save;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? Save { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddGadgetResultInfo(Save, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class AddGadget_Save_GadgetsFromGadgetsEntityMapper : global::StrawberryShake.IEntityMapper<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity, AddGadget_Save_Gadgets>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddGadget_Save_GadgetsFromGadgetsEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public AddGadget_Save_Gadgets Map(global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new AddGadget_Save_Gadgets(entity.Id, entity.ProductName, entity.Brand, entity.Cost, entity.Type);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    internal interface IGadgetsInputInfo
    {
        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsProductNameSet { get; }

        global::System.Boolean IsBrandSet { get; }

        global::System.Boolean IsCostSet { get; }

        global::System.Boolean IsTypeSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GetAllGadgetBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadgetResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadgetResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public GetAllGadgetBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadgetResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetAllGadgetResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetAllGadgetResult Result, GetAllGadgetResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetAllGadgetResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetAllGadgetResult, GetAllGadgetResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? fetchAllGadgetsId = default !;
            _entityStore.Update(session =>
            {
                fetchAllGadgetsId = UpdateIGetAllGadget_FetchAllGadgetsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fetchAllGadgets"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetAllGadgetResultInfo(fetchAllGadgetsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetAllGadget_FetchAllGadgetsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var gadgetss = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                gadgetss.Add(UpdateIGetAllGadget_FetchAllGadgetsEntity(session, child, entityIds));
            }

            return gadgetss;
        }

        private global::StrawberryShake.EntityId? UpdateIGetAllGadget_FetchAllGadgetsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Gadgets", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity? entity))
                {
                    session.SetEntity(entityId, new global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "productName")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "brand")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cost")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "productName")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "brand")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cost")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class GetFilterByBrandBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrandResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrandResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public GetFilterByBrandBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrandResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetFilterByBrandResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetFilterByBrandResult Result, GetFilterByBrandResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetFilterByBrandResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetFilterByBrandResult, GetFilterByBrandResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? filterByBrandId = default !;
            _entityStore.Update(session =>
            {
                filterByBrandId = UpdateIGetFilterByBrand_FilterByBrandEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filterByBrand"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetFilterByBrandResultInfo(filterByBrandId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetFilterByBrand_FilterByBrandEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var gadgetss = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                gadgetss.Add(UpdateIGetFilterByBrand_FilterByBrandEntity(session, child, entityIds));
            }

            return gadgetss;
        }

        private global::StrawberryShake.EntityId? UpdateIGetFilterByBrand_FilterByBrandEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Gadgets", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity? entity))
                {
                    session.SetEntity(entityId, new global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "productName")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "brand")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cost")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "productName")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "brand")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cost")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class AddGadgetBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadgetResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadgetResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public AddGadgetBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadgetResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddGadgetResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddGadgetResult Result, AddGadgetResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IAddGadgetResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddGadgetResult, AddGadgetResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? saveId = default !;
            _entityStore.Update(session =>
            {
                saveId = UpdateIAddGadget_SaveEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "save"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddGadgetResultInfo(saveId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIAddGadget_SaveEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Gadgets", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity? entity))
                {
                    session.SetEntity(entityId, new global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "productName")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "brand")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cost")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "productName")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "brand")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cost")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class MyGqlServerClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
            "Gadgets" => ParseGadgetsEntityId(obj, __typename), _ => throw new global::System.NotSupportedException()}

            ;
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
            "Gadgets" => FormatGadgetsEntityId(entityId), _ => throw new global::System.NotSupportedException()}

            ;
        }

        private global::StrawberryShake.EntityId ParseGadgetsEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatGadgetsEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public partial class MyGqlServerClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public MyGqlServerClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories): base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.0.0")]
    public static partial class MyGqlServerClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.MyGqlServerClientStoreAccessor> AddMyGqlServerClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.MyGqlServerClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.GetAllGadgetQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.GetFilterByBrandQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.AddGadgetMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.MyGqlServerClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IMyGqlServerClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.MyGqlServerClientStoreAccessor>("MyGqlServerClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("MyGqlServerClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.GetAllGadget_FetchAllGadgets_Gadgets>, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GetAllGadget_FetchAllGadgets_GadgetsFromGadgetsEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.GetFilterByBrand_FilterByBrand_Gadgets>, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GetFilterByBrand_FilterByBrand_GadgetsFromGadgetsEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GadgetsEntity, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.AddGadget_Save_Gadgets>, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.AddGadget_Save_GadgetsFromGadgetsEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UuidSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.GadgetsInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadgetResult>, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GetAllGadgetResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadgetResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadgetQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadgetResult>, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GetAllGadgetBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadgetResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadgetResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadgetResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.GetAllGadgetQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetAllGadgetQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.GetAllGadgetQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrandResult>, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GetFilterByBrandResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrandResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrandQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrandResult>, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.GetFilterByBrandBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrandResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrandResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrandResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.GetFilterByBrandQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IGetFilterByBrandQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.GetFilterByBrandQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadgetResult>, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.AddGadgetResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadgetResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadgetMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadgetResult>, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.AddGadgetBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadgetResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadgetResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadgetResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.AddGadgetMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IAddGadgetMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.AddGadgetMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.State.MyGqlServerClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.MyGqlServerClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.IMyGqlServerClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Dot5.Bwasm.StraberryShake.Sample.MyGqlServer.MyGqlServerClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
